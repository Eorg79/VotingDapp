{"version":3,"sources":["buffet.jpg","utils/ContractContext.js","getWeb3.js","components/Registration.js","components/Proposals.js","components/Voting.js","components/WorkflowButton.js","components/Winner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContractContext","createContext","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","on","location","reload","console","log","provider","providers","HttpProvider","Registration","useContext","contract","accounts","votersList","setVotersList","isOwner","isVoter","onSubmit","values","onSubmitProps","address","formik","VoterAddress","methods","addVoter","send","from","alert","resetForm","validationSchema","Yup","shape","matches","required","useFormik","initialValues","useEffect","getPastEvents","filter","value","fromBlock","toBlock","err","events","map","voter","Voter","returnValues","_voterAddress","getExistingVoters","className","handleSubmit","htmlFor","type","id","onChange","handleChange","onBlur","handleBlur","touched","errors","key","Proposals","proposalsList","setProposalsList","proposal","Proposal","addProposal","min","max","_proposalId","getOneProposal","call","description","Id","Description","getExistingProposals","Voting","hasVoted","setVote","proposalId","onClick","confirm","WorkflowButton","workflowStatus","startProposalsRegistering","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Winner","useState","winnerID","setWinnerID","voteCount","winner","setWinner","winningProposalID","winnerId","winnerData","getWinner","src","buffet","alt","App","setworkflowStatus","undefined","setWeb3","setAccounts","setContract","setIsOwner","setIsVoter","setHasVoted","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","setWorkflowStatus","statusIndex","owner","getVoter","isRegistered","WorkflowStatusChange","event","_newStatus","changed","str","VoterRegistered","ProposalRegistered","Voted","error","runInit","Provider","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a099f5f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/buffet.fca9a9dd.jpg\";","import { createContext } from \"react\";\r\n\r\nexport const ContractContext = createContext(\"\");","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n\n          window.ethereum.on('accountsChanged', () => {\n\t          window.location.reload();\n          });\n          \n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      \n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n\n\n","import React, { useContext, useEffect } from 'react';\nimport { ContractContext } from '../utils/ContractContext';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst Registration = () => {\n    const {contract, accounts, votersList, setVotersList, isOwner, isVoter } = useContext(ContractContext);\n    \n    const initialValues = {\n      VoterAddress: ''\n    };\n\n      const onSubmit =  async (values, onSubmitProps) => {\n            const address= formik.values.VoterAddress;\n            await contract.methods.addVoter(address).send({from: accounts[0]});\n            alert('Voter has been registered');\n            onSubmitProps.resetForm();\n      };\n    \n      const EthAddressRegex = /^0x[a-fA-F0-9]{40}$/;\n      const validationSchema = Yup.object().shape({\n      VoterAddress: Yup.string().matches(EthAddressRegex, 'invalid address format').required('this field must be filled'),\n      });\n\n      const formik = useFormik({ initialValues, onSubmit, validationSchema });\n\n    useEffect(() => {\n      const getExistingVoters = async () => {\n        await contract.getPastEvents('VoterRegistered', {\n          filter: {\n              value: []    \n          },\n          fromBlock: 0,             \n          toBlock: 'latest'},\n         (err, events) => {\n              events.map( async (voter) => {\n              let Voter = voter.returnValues._voterAddress;\n              setVotersList(votersList => [...votersList, Voter]);\n            });\n          });\n        };\n      getExistingVoters();\n      }, []);\n\n    return (\n         <>      \n                {isOwner &&   \n                <div className=\"card\">\n                    <h2>Register voters</h2>\n                      <form onSubmit={formik.handleSubmit}>\n                        <div className=\"form-control\">\n                          <label htmlFor=\"VoterAddress\">Address</label>\n                          <input type=\"text\" id=\"VoterAddress\" onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.VoterAddress} />\n                          {formik.touched.VoterAddress && formik.errors.VoterAddress ? (<div className=\"error\">{formik.errors.VoterAddress}</div>) : (null)}\n                          </div>\n                          <button className=\"btn\" type=\"submit\">add Voter</button>\n                      </form>                     \n                </div>\n                  }\n                {isVoter ? (\n                <div className=\"card\">\n                    <h2>list of registered voters</h2>\n                    <ul className=\"voters-list\">\n                      {votersList.map((voter) => (\n                        <li key={voter}>{voter}</li>\n                      ))}\n                    </ul>   \n                </div>)\n                : (\n                <div className=\"card\">\n                <p>You must be a registered voter to see list of voters.</p>\n                </div>\n                )}\n                  \n         </>\n      );\n};\n\nexport default Registration;","import React, { useContext, useEffect } from 'react';\nimport { ContractContext } from '../utils/ContractContext';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\n\nconst Proposals = () => {\n  const { contract, accounts, proposalsList, setProposalsList, isVoter } = useContext(ContractContext);\n  \n    const initialValues = {\n      proposal: ''\n    };\n\n    const onSubmit =  async (values, onSubmitProps) => {\n            console.log(formik.values.proposal);\n            const Proposal = formik.values.proposal;\n            await contract.methods.addProposal(Proposal).send({from: accounts[0]});\n            alert('Your proposal has been sent, you should see the transaction in your wallet shortly');\n            onSubmitProps.resetForm();\n    };\n\n    const validationSchema = Yup.object({\n        proposal: Yup.string().min(3, '3 caractères minimum').max(80, '80 caractères maximum').required('ce champ doit être complété'),\n    }); \n\n    const formik = useFormik({ initialValues, onSubmit, validationSchema });\n  \n    useEffect(() => {\n      const getExistingProposals = async () => {\n        await contract.getPastEvents('ProposalRegistered', {\n          filter: {\n              value: []    \n          },\n          fromBlock: 0,             \n          toBlock: 'latest'},\n         (err, events) => {\n              events.map( async (proposal) => {\n              let id = proposal.returnValues._proposalId;\n              let description = await contract.methods.getOneProposal(id).call({from: accounts[0]})\n              let Proposal = {Id: id, Description: description.description};\n              setProposalsList(proposalsList => [...proposalsList, Proposal]);\n            });\n          });\n        };\n      getExistingProposals();\n      }, []);\n    \n      return (\n         <>\n         {isVoter ? ( \n              <>\n                <div className=\"card\">\n                    <h2>Propose a dish</h2>\n                      <form onSubmit={formik.handleSubmit}>\n                        <div className=\"form-control\">\n                          <label htmlFor=\"proposal\">your dish</label>\n                          <input type=\"text\" id=\"proposal\" onChange={formik.handleChange} onBlur={formik.handleBlur} value={formik.values.proposal} />\n                          {formik.touched.proposal && formik.errors.proposal ? (<div className=\"error\">{formik.errors.proposal}</div>) : (null)}\n                          </div>\n                          <button className=\"btn\" type=\"submit\">add proposal</button>\n                      </form>  \n                </div>\n                \n                <div className=\"card\">\n                    <h2>list of proposed dishes</h2>   \n                    <ul>\n                      {proposalsList.map((proposal)=> (\n                        <li key={proposal.Id}>\n                          {proposal.Description}</li>\n                          ))}               \n                      </ul>\n                </div>\n              </>)\n              \n              : (<div className=\"card\">\n                <p>Sorry, you must be a registered voter to submit proposals.</p>\n                </div>\n                )}\n         </>\n      );\n};\n\nexport default Proposals;","import React, { useContext, useEffect } from 'react';\nimport { ContractContext } from '../utils/ContractContext';\n\nconst Voting = () => {\n  const { proposalsList, setProposalsList, contract, accounts, isVoter, hasVoted } = useContext(ContractContext);\n  \n  const setVote = async (proposalId) => {\n    await contract.methods.setVote(proposalId).send({from: accounts[0]});\n    alert('Your vote has been sent, you should see the transaction in your wallet shortly');\n  };\n\n  \n  useEffect(() => {\n    const getExistingProposals = async () => {\n      await contract.getPastEvents('ProposalRegistered', {\n        filter: {\n            value: []    \n        },\n        fromBlock: 0,             \n        toBlock: 'latest'},\n       (err, events) => {\n            events.map( async (proposal) => {\n            let id = proposal.returnValues._proposalId;\n            let description = await contract.methods.getOneProposal(id).call({from: accounts[0]})\n            let Proposal = {Id: id, Description: description.description};\n            setProposalsList(proposalsList => [...proposalsList, Proposal]);\n          });\n        });\n      };\n    getExistingProposals();\n    }, []);\n\n  return (\n         <>\n            <div className=\"card\">\n              <h2>Voting session</h2>\n              {(isVoter && !hasVoted) && \n                    <table className=\"table\">\n                      <thead className=\"table__thead\">\n                        <tr className=\"cart-table-range-label\">\n                          <td>description</td>\n                          <td>vote for</td>\n                        </tr >       \n                        {proposalsList.map((proposal)=> (\n                        <tr className=\"cart-table-range\" key={proposal.Id}>\n                          <td>{proposal.Description}</td>\n                          <td>\n                            <div id={proposal.Id} className=\"icon\" onClick={() => { if (window.confirm(\"Your vote is about to be sent. You can vote only once\")) {setVote(proposal.Id)}}}>\n                              <i className=\"far fa-heart\"></i>\n                              <i className=\"fas fa-heart\"></i>\n                            </div>\n                          </td>\n                        </tr>))}\n                      </thead>\n                    </table>}\n                {(isVoter && hasVoted) && \n                  <p>You have already voted for your favorite dish.</p>}\n                {!isVoter &&\n                  <p>Sorry, you must be a registered voter to vote for your favorite dish.</p>}\n                </div>                          \n         </>\n    );\n};\n\nexport default Voting;","import React, { useContext } from 'react';\nimport { ContractContext } from '../utils/ContractContext';\n\nconst WorkflowButton = () => {\n    const { workflowStatus, contract, accounts } = useContext(ContractContext);\n    \n    const startProposalsRegistering = async () => {\n        window.confirm('This will definitively end the voters registration stage');\n        await contract.methods.startProposalsRegistering().send({from: accounts[0]});;\n      };\n    const endProposalsRegistering = async () => {\n        window.confirm('This will definitively end the proposal registration stage');\n        await contract.methods.endProposalsRegistering().send({from: accounts[0]});;  \n      };  \n    const startVotingSession = async () => {\n        window.confirm('This will start the voting session');\n        await contract.methods.startVotingSession().send({from: accounts[0]});; \n      };\n    const endVotingSession = async () => {\n        window.confirm('This will definitively end the voting session');\n        await contract.methods.endVotingSession().send({from: accounts[0]});;    \n      };\n    const tallyVotes = async () => {\n        window.confirm('This will definitively tally votes');\n        await contract.methods.tallyVotes().send({from: accounts[0]});;    \n      };\n\n    return (\n      <> \n        {workflowStatus === \"Registering voters\" && <button className='btn' onClick={startProposalsRegistering}>open proposals</button>}\n        {workflowStatus === \"Registering proposals\" && <button className='btn' onClick={endProposalsRegistering}>close proposals</button>}\n        {workflowStatus === \"Proposals registration ended\" && <button className='btn' onClick={startVotingSession}>start voting</button>}\n        {workflowStatus === \"Voting session started\" && <button className='btn' onClick={endVotingSession}>end voting</button>}\n        {workflowStatus === \"Voting session ended\" && <button className='btn' onClick={tallyVotes}>tally votes</button>}\n      </> \n    )\n\n};\n\nexport default WorkflowButton; ","import React, { useState, useEffect, useContext } from 'react';\nimport { ContractContext } from '../utils/ContractContext';\nimport buffet from '../buffet.jpg';\n\nconst Winner = () => {\n    const {contract, accounts, isVoter, isOwner } = useContext(ContractContext);\n    const [winnerID, setWinnerID] = useState(null);\n    const [winner, setWinner] = useState({\n        id: null,\n        description: '',\n        voteCount: null\n    });\n\n    useEffect(() => {\n    const getWinner = async () => {\n       const winnerId = await contract.methods.winningProposalID().call();\n          if (winnerId) {\n            setWinnerID(winnerId);\n            const winnerData = await contract.methods.getOneProposal(winnerId).call({from: accounts[0]}); \n            setWinner({...winner, id: winnerId, description: winnerData.description, voteCount: winnerData.voteCount});\n            }\n           else {\n                console.log('no winning proposal')\n           } \n     };\n    getWinner();\n    }, [winner, accounts, contract]);\n\n    return (\n            <div className=\"card\">\n                { (isVoter || isOwner) &&\n                <>\n                <h2>and the winning proposal is...</h2>\n                <p>Voting session has ended, votes has been tallied and the winning proposal is <strong>\"{winner.description}\"</strong>.</p>\n                <p>Your canteen will offer this delicious dish shortly...</p>\n                <div className=\"img-wrapper\">\n                    <img className=\"img\" src={buffet} alt=\"buffet\"/>\n                </div>\n                </> }\n                { (!isVoter) &&\n                <>\n                <h2>and the winning proposal is...</h2>\n                <p>Too bad, you have not paticipated. Voting session has ended, votes has been tallied and the proposal number <strong>\"{winnerID}\"</strong> is the winner.</p>\n                <p>Please contact the admin if you want the details of this proposal.</p>\n                </> }\n            </div>\n                   )\n};\n\nexport default Winner;","import React, { useState, useEffect } from \"react\";\nimport { ContractContext } from './utils/ContractContext';\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport Registration from './components/Registration';\nimport Proposals from './components/Proposals';\nimport Voting from './components/Voting';\nimport WorkflowButton from \"./components/WorkflowButton\";\nimport Winner from \"./components/Winner\";\n\nimport \"./styles/main.css\";\n\nconst App = () => {\n  const [workflowStatus, setworkflowStatus] = useState('');\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState([]);\n  const [contract, setContract] = useState([]);\n  const [isOwner, setIsOwner] = useState(false);\n  const [isVoter, setIsVoter] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n  const [votersList, setVotersList] = useState([]);\n  const [proposalsList, setProposalsList] = useState([]);\n  \n  useEffect(() => {\n    const runInit = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3();\n        // Use web3 to get the user's accounts.\n        const accounts = await web3.eth.getAccounts();\n        // Get the contract instance.\n        const networkId = await web3.eth.net.getId();\n        const deployedNetwork = VotingContract.networks[networkId];\n        const instance = new web3.eth.Contract(\n          VotingContract.abi,\n          deployedNetwork && deployedNetwork.address,\n          );\n          // Set web3, accounts, and contract to the state\n        setWeb3(web3);\n        setAccounts(accounts);\n        setContract(instance);\n\n        //function to set workflowStatus state  \n        const setWorkflowStatus = async (statusIndex) => {\n            switch(statusIndex) {\n              case \"0\" : setworkflowStatus(...workflowStatus, \"Registering voters\");\n              break;\n              case \"1\" : setworkflowStatus(...workflowStatus, \"Registering proposals\");\n              break; \n              case \"2\" : setworkflowStatus(...workflowStatus, \"Proposals registration ended\");\n              break;\n              case \"3\" : setworkflowStatus(...workflowStatus,\"Voting session started\");\n              break;\n              case \"4\" : setworkflowStatus(...workflowStatus,\"Voting session ended\");\n              break;\n              case \"5\" : setworkflowStatus(...workflowStatus,\"Votes Tallied\");\n              break;\n              default: setworkflowStatus(...workflowStatus, \"Unknown workflow status\");\n            };\n          };\n          \n          //get contract workflowstatus\n          let statusIndex = await instance.methods.workflowStatus().call();\n          setWorkflowStatus(statusIndex);\n\n          //check if user is owner\n          const owner = await instance.methods.owner().call();\n          if (accounts[0] === owner) {\n              setIsOwner(true);\n            }\n\n          //check if user is registered voter\n          const user = await instance.methods.getVoter(accounts[0]).call({from: accounts[0]});\n          if (user.isRegistered === true) {\n           setIsVoter(true);\n          };  \n\n          //check if user has voted\n          const voted = await instance.methods.getVoter(accounts[0]).call({from: accounts[0]});\n          if (voted.hasVoted === true) {\n           setHasVoted(true);\n          };  \n\n          //retrieve WorkflowStatusChange events\n          await instance.events.WorkflowStatusChange()   \n          .on('data', event => setWorkflowStatus(event.returnValues._newStatus))\n          .on('changed', changed => console.log(changed))\n          //.on('error', err => throw err)\n          .on('connected', str => console.log(str))\n \n          //subscription to VoterRegistered event\n          await instance.events.VoterRegistered()   \n          .on('data', event => setVotersList(votersList => [event.returnValues._voterAddress, ...votersList]))\n          .on('changed', changed => console.log(changed))\n          //.on('error', err => throw err)\n          .on('connected', str => console.log(str))\n          \n          //subscription to ProposalRegistered event\n          await instance.events.ProposalRegistered()   \n          .on('data', async (event) => {\n            let id = event.returnValues._proposalId;\n            //let from = web3.eth.accounts.recoverTransaction(event.signature);\n            let description = await instance.methods.getOneProposal(id).call({from: accounts[0]});\n            let Proposal = {Id: id, Description: description.description};\n            setProposalsList(proposalsList => [...proposalsList, Proposal]);\n            })\n          //setProposalsList(proposalsList => [event.returnValues.proposalId, ...proposalsList]);\n          .on('changed', changed => console.log(changed))\n          //.on('error', err => throw err)\n          .on('connected', str => console.log(str))\n      \n          //subscription to Voted event\n          await instance.events.Voted()   \n          .on('data', event => {\n            console.log(event.returnValues._voterAddress);\n            setHasVoted(true); })\n          .on('changed', changed => console.log(changed))\n          //.on('error', err => throw err)\n          .on('connected', str => console.log(str))\n\n        } catch (error) {\n          // Catch any errors for any of the above operations.\n            console.error(error);\n          }\n        };\n       runInit();\n      }, []);\n\n  return (\n    \n    <div className=\"body-container\">\n      <ContractContext.Provider value={{ workflowStatus, setworkflowStatus, web3, setWeb3, accounts, setAccounts, contract, setContract, votersList, setVotersList, isOwner, isVoter, setIsVoter, hasVoted, setHasVoted, proposalsList, setProposalsList }}>\n          <div className=\"header\">\n            <h1>Vote for your canteen Menu</h1>\n            <div>connected wallet: {accounts[0]}</div>\n          </div>\n        {web3 ? \n          (<div className=\"container\">\n            <div className=\"dashboard\">\n                  <h2>Current status: {workflowStatus}</h2>\n                  {workflowStatus === \"Proposals registration ended\" && <p>Voting session will start shortly</p>}\n                  {workflowStatus === \"Voting session ended\" && <p>Votes will be tallied soon</p>}     \n                  {workflowStatus === \"Unknown workflow status\" && <p>Oups, there is a problem with the session status, please try again</p>}     \n                  {isOwner === true && <WorkflowButton />}\n            </div>\n            {workflowStatus === \"Registering voters\" && <Registration/>}\n            {workflowStatus === \"Registering proposals\" && <Proposals />}\n            {workflowStatus === \"Voting session started\" && <Voting />}\n            {workflowStatus === \"Votes Tallied\" && <Winner />}\n          </div>\n          ) :\n          (<div className=\"container\">\n            <div className=\"card\">\n              <h2>Sorry, no web3 connexion.</h2>\n              <p><strong>Please try again, by updating or reconnecting you wallet.</strong></p>\n              <div className=\"animated-icon\">\n                <i className=\"fa-solid fa-browser fa-beat-fade\"></i>\n              </div>\n            </div>\n          </div>\n          )}\n      </ContractContext.Provider>\n    </div>\n    \n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}